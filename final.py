{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "final-history",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 2.0.1 (SDL 2.0.14, Python 3.8.5)\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n",
      "Detect!\n",
      "Detect!\n",
      "Detect!\n",
      "Detect!\n",
      "Detect!\n",
      "Detect!\n",
      "Detect!\n",
      "falling detected\n",
      "falling detected\n",
      "Detect!\n",
      "Say something!\n",
      "Say Now!\n",
      "Google Speech Recognition could not understand audio\n",
      "Say something!\n",
      "Say Now!\n",
      "falling detected\n",
      "falling detected\n",
      "박스 좀 크게 잡혔는데 대답했어 다시 화면 봐봐 아 미치겠네 진짜\n",
      "Say something!\n",
      "Say Now!\n",
      "falling detected\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import argparse\n",
    "import time\n",
    "import sqlite3\n",
    "import math\n",
    "import socket\n",
    "import pyaudio\n",
    "import codecs\n",
    "import sys\n",
    "import pygame\n",
    "import sounddevice as sd\n",
    "import speech_recognition as sr\n",
    "from numpy import linalg as LA\n",
    "import threading\n",
    "from threading import Thread, Lock\n",
    "from multiprocessing import Process\n",
    "duration = 10  # seconds\n",
    "#c.execute(\"SELECT * FROM result\")\n",
    "#rows = c.fetchall()\n",
    "#for row in rows:\n",
    "#    print(row)\n",
    "sound_val = 0\n",
    "result_val = 0\n",
    "falling_val = 0\n",
    "lock = Lock()\n",
    "# Load yolo\n",
    "def load_yolo(): \n",
    "    net = cv2.dnn.readNet(\"C:/yolov3_final.weights\", \"C:/yolov3.cfg\")\n",
    "    classes = []\n",
    "    with open(\"C:/obj.names\", \"r\") as f:\n",
    "        classes = [line.strip() for line in f.readlines()]\n",
    "    layers_names = net.getLayerNames()\n",
    "    output_layers = [layers_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]\n",
    "    colors = np.random.uniform(0, 255, size=(len(classes), 3))\n",
    "    return net, classes, colors, output_layers\n",
    "\n",
    "\n",
    "def load_image(img_path):\n",
    "    # image loading\n",
    "    img = cv2.imread(img_path)\n",
    "    img = cv2.resize(img, None, fx=0.4, fy=0.4)\n",
    "    height, width, channels = img.shape\n",
    "    return img, height, width, channels\n",
    "\n",
    "\n",
    "def start_webcam():\n",
    "    cap = cv2.VideoCapture(0)\n",
    "    return cap\n",
    "\n",
    "\n",
    "def display_blob(blob):\n",
    "    '''\n",
    "        Three images each for RED, GREEN, BLUE channel\n",
    "    '''\n",
    "    for b in blob:\n",
    "        for n, imgb in enumerate(b):\n",
    "            cv2.imshow(str(n), imgb)\n",
    "\n",
    "\n",
    "def detect_objects(img, net, outputLayers):\n",
    "    blob = cv2.dnn.blobFromImage(img, scalefactor=0.00392, size=(320, 320), mean=(0, 0, 0), swapRB=True, crop=False)\n",
    "    net.setInput(blob)\n",
    "    outputs = net.forward(outputLayers)\n",
    "    return blob, outputs\n",
    "\n",
    "\n",
    "def get_box_dimensions(outputs, height, width):\n",
    "    boxes = []\n",
    "    confs = []\n",
    "    class_ids = []\n",
    "    for output in outputs:\n",
    "        for detect in output:\n",
    "            scores = detect[5:]\n",
    "            class_id = np.argmax(scores)\n",
    "            conf = scores[class_id]\n",
    "            if conf > 0.3:\n",
    "                center_x = int(detect[0] * width)\n",
    "                center_y = int(detect[1] * height)\n",
    "                w = int(detect[2] * width)\n",
    "                h = int(detect[3] * height)\n",
    "                x = int(center_x - w / 2)\n",
    "                y = int(center_y - h / 2)\n",
    "                boxes.append([x, y, w, h])\n",
    "                confs.append(float(conf))\n",
    "                class_ids.append(class_id)\n",
    "    return boxes, confs, class_ids\n",
    "\n",
    "\n",
    "def draw_labels(boxes, confs, colors, class_ids, classes, img):\n",
    "    global falling_val\n",
    "    conn = sqlite3.connect('C:/Users/basic/django-react/django-react/backend/db.sqlite3')\n",
    "    c = conn.cursor()\n",
    "    indexes = cv2.dnn.NMSBoxes(boxes, confs, 0.5, 0.4)\n",
    "    font = cv2.FONT_HERSHEY_PLAIN\n",
    "    for i in range(len(boxes)):\n",
    "        if i in indexes :\n",
    "            x, y, w, h = boxes[i]\n",
    "            label = str(classes[class_ids[i]])\n",
    "            color = colors[class_ids[i]]              \n",
    "            #print(class_ids[i])\n",
    "            #print(sound_val)\n",
    "            if class_ids[i] == 1 and sound_val == 1:\n",
    "                c.execute(\"UPDATE post_post SET content = 1\")\n",
    "                print(\"falling detected\")\n",
    "                falling_val = 1\n",
    "                conn.commit()\n",
    "            #else:\n",
    "             #   c.execute(\"UPDATE post_post SET content = 0\")\n",
    "              #  conn.commit()\n",
    "            cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)\n",
    "            cv2.putText(img, label, (x, y - 5), font, 1, color, 1)\n",
    "    cv2.imshow(\"Image\", img)\n",
    "\n",
    "\n",
    "def image_detect(img_path):\n",
    "    model, classes, colors, output_layers = load_yolo()\n",
    "    image, height, width, channels = load_image(img_path)\n",
    "    blob, outputs = detect_objects(image, model, output_layers)\n",
    "    boxes, confs, class_ids = get_box_dimensions(outputs, height, width)\n",
    "    draw_labels(boxes, confs, colors, class_ids, classes, image)\n",
    "    while True:\n",
    "        key = cv2.waitKey(1)\n",
    "        if key == 27:\n",
    "            break\n",
    "\n",
    "\n",
    "def webcam_detect():\n",
    "    model, classes, colors, output_layers = load_yolo()\n",
    "    cap = start_webcam()\n",
    "#    fourcc = cv2.VideoWriter_fourcc(*'DIVX')\n",
    "#    out = cv2.VideoWriter('C:/save.avi', fourcc, 25.0, (640, 480))\n",
    "    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)\n",
    "    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)\n",
    "    fourcc = cv2.VideoWriter_fourcc(*'XVID')\n",
    "    writer = cv2.VideoWriter('test.avi', fourcc, 24, (int(width), int(height)))\n",
    "    while True:\n",
    "        _, frame = cap.read()\n",
    "        height, width, channels = frame.shape\n",
    "        blob, outputs = detect_objects(frame, model, output_layers)\n",
    "        boxes, confs, class_ids = get_box_dimensions(outputs, height, width)\n",
    "        draw_labels(boxes, confs, colors, class_ids, classes, frame)\n",
    "        key = cv2.waitKey(1)\n",
    "        writer.write(frame)\n",
    "        if key == 27:\n",
    "            break\n",
    "    cap.release()\n",
    "\n",
    "\n",
    "def start_video():\n",
    "    video_path = \"/home/swedu/jj/2.mp4\"\n",
    "    model, classes, colors, output_layers = load_yolo()\n",
    "    cap = cv2.VideoCapture(video_path)\n",
    "    while True:\n",
    "        _, frame = cap.read()\n",
    "        height, width, channels = frame.shape\n",
    "        blob, outputs = detect_objects(frame, model, output_layers)\n",
    "        boxes, confs, class_ids = get_box_dimensions(outputs, height, width)\n",
    "        draw_labels(boxes, confs, colors, class_ids, classes, frame)\n",
    "        key = cv2.waitKey(1)\n",
    "        if key == 27 :\n",
    "            break\n",
    "    cap.release()\n",
    "\n",
    "def sound():\n",
    "    global sound_val\n",
    "    global falling_val\n",
    "\n",
    "    def audio_callback(indata, frames, time, status) :\n",
    "        global sound_val\n",
    "        global falling_val\n",
    "        conn = sqlite3.connect('C:/Users/basic/django-react/django-react/backend/db.sqlite3')\n",
    "        c = conn.cursor()\n",
    "        volume_norm = np.linalg.norm(indata) * 10\n",
    "        if int(volume_norm) > 80:\n",
    "            #print(int(volume_norm))\n",
    "            print(\"Detect!\")\n",
    "            lock.acquire() \n",
    "            sound_val = 1\n",
    "            lock.release()\n",
    "            if falling_val==1:\n",
    "                pygame.mixer.init()\n",
    "                sound = pygame.mixer.Sound(\"C:/test.wav\")\n",
    "                sound2 = pygame.mixer.Sound(\"C:/got_it.wav\")\n",
    "                r = sr.Recognizer()\n",
    "                cnt = 0\n",
    "                while cnt < 3:\n",
    "                    with sr.Microphone() as source:\n",
    "                        print(\"Say something!\")\n",
    "                        sound.play()\n",
    "                        sd.sleep(duration * 400)\n",
    "                        print(\"Say Now!\")\n",
    "                        audio = r.listen(source)\n",
    "                        c.execute(\"UPDATE post_post SET content = 2\")\n",
    "                        conn.commit()\n",
    "\n",
    "                    # 구글 웹 음성 API로 인식하기 (하루에 제한 50회)\n",
    "\n",
    "                    try:\n",
    "                        text = r.recognize_google(audio, language='ko')\n",
    "                        print(text)\n",
    "                        if (text == '응' or text == '예스' or text == '어' or text == '네' or text =='yes'):\n",
    "                            print(text + '<-')\n",
    "                            c.execute(\"UPDATE post_post SET content = 2\")\n",
    "                            conn.commit()\n",
    "                            sd.sleep(duration * 300)\n",
    "                            sound2.play()\n",
    "                            cnt = 4\n",
    "                        elif (text == '아니' or text == '아니오' or text == '아냐' or text == '노'):\n",
    "                            print(text + '<-')\n",
    "                            cnt = 4\n",
    "                    except sr.UnknownValueError:\n",
    "                        print(\"Google Speech Recognition could not understand audio\")\n",
    "                        cnt += 1\n",
    "                    except sr.RequestError as e:\n",
    "                        print(\"Could not request results from Google Speech Recognition service; {0}\".format(e))\n",
    "                        cnt += 1\n",
    "                if cnt == 3:\n",
    "                    c.execute(\"UPDATE post_post SET content = 2\")\n",
    "                    conn.commit()\n",
    "                while True :\n",
    "                    sd.sleep(duration * 10000)\n",
    "\n",
    "                        #print(sound_val)\n",
    "        else: \n",
    "            lock.acquire()\n",
    "            #sound_val = 0\n",
    "            lock.release()\n",
    "            #print(int(volume_norm))\n",
    "            #print(\"Not yet...\")\n",
    "        \n",
    "             \n",
    "    stream = sd.InputStream(callback=audio_callback)\n",
    "    with stream :\n",
    "        sd.sleep(duration * 10000)\n",
    "    \n",
    "\"\"\"\n",
    "\n",
    "def sound_service():  \n",
    "    global falling_val\n",
    "    conn = sqlite3.connect('C:/Users/basic/django-react/django-react/backend/db.sqlite3')\n",
    "    c = conn.cursor()\n",
    "    while falling_val == 0:\n",
    "        sd.sleep(10000)\n",
    "    pygame.mixer.init()\n",
    "    sound = pygame.mixer.Sound(\"C:/test.wav\")\n",
    "    r = sr.Recognizer()\n",
    "    with sr.Microphone() as source:\n",
    "        print(\"Say something!\")\n",
    "        sound.play()\n",
    "        audio = r.listen(source)\n",
    "        c.execute(\"UPDATE post_post SET content = 2\")\n",
    "        conn.commit()\n",
    "\n",
    "    # 구글 웹 음성 API로 인식하기 (하루에 제한 50회)\n",
    "    try:\n",
    "        text = r.recognize_google(audio, language='ko')\n",
    "        print(text)\n",
    "        if (text == '응' or text == '예스' or text == '어' or text == '네'):\n",
    "            print(text + '<-')\n",
    "            c.execute(\"UPDATE post_post SET content = 2\")\n",
    "            conn.commit()\n",
    "        elif (text == '아니' or text == '아니오' or text == '아냐' or text == '노'):\n",
    "            print(text + '<-')\n",
    "    except sr.UnknownValueError:\n",
    "        print(\"Google Speech Recognition could not understand audio\")\n",
    "    except sr.RequestError as e:\n",
    "        print(\"Could not request results from Google Speech Recognition service; {0}\".format(e))\n",
    "\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "def makeThreads():\n",
    "    global sound_val\n",
    "\n",
    "    t1=threading.Thread(target = sound)\n",
    "    t2=threading.Thread(target = webcam_detect)\n",
    "#    t3=threading.Thread(target = sound_service)\n",
    "\n",
    "    t1.start()\n",
    "    t2.start()\n",
    "#    t3.start()\n",
    "\n",
    "    t1.join()\n",
    "    t2.join()\n",
    "#    t3.join()\n",
    "\n",
    "\n",
    "makeThreads()\n",
    "\n",
    "c.close()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sweet-still",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "concerned-capacity",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "swiss-advocate",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
